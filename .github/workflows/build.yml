name: Build Executables

on:
  # 当推送 tag 时触发（如 v1.0.0）
  push:
    tags:
      - 'v*'

  # 允许手动触发
  workflow_dispatch:
    inputs:
      debug_build:
        description: '构建调试版本（保留控制台）'
        required: false
        type: boolean
        default: false

jobs:
  build:
    name: Build ${{ matrix.os }} Executable
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: Windows
            artifact_name: Lunar Eclipse Align Tool.exe
            asset_name: LunarEclipseAlignTool-Windows.exe

          - os: macos-latest
            platform: macOS
            artifact_name: Lunar Eclipse Align Tool.app
            asset_name: LunarEclipseAlignTool-macOS.dmg

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      run: python build.py
      env:
        DEBUG_BUILD: ${{ github.event.inputs.debug_build == 'true' && '1' || '0' }}

    - name: Build with PyInstaller (macOS)
      if: matrix.os == 'macos-latest'
      run: python build.py
      env:
        DEBUG_BUILD: ${{ github.event.inputs.debug_build == 'true' && '1' || '0' }}

    - name: Create DMG (macOS only)
      if: matrix.os == 'macos-latest'
      run: |
        # 安装 create-dmg
        brew install create-dmg

        # 创建 DMG
        create-dmg \
          --volname "Lunar Eclipse Align Tool" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --app-drop-link 450 185 \
          "dist/${{ matrix.asset_name }}" \
          "dist/${{ matrix.artifact_name }}" || true

        # 如果 create-dmg 失败，使用 hdiutil 创建简单 DMG
        if [ ! -f "dist/${{ matrix.asset_name }}" ]; then
          hdiutil create -volname "Lunar Eclipse Align Tool" \
            -srcfolder "dist/${{ matrix.artifact_name }}" \
            -ov -format UDZO \
            "dist/${{ matrix.asset_name }}"
        fi

    - name: Get version from tag
      id: get_version
      shell: bash
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=dev-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
        fi

    - name: Upload artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: LunarEclipseAlignTool-${{ matrix.platform }}-${{ steps.get_version.outputs.version }}${{ github.event.inputs.debug_build == 'true' && '-debug' || '' }}
        path: dist/Lunar Eclipse Align Tool.exe
        if-no-files-found: error

    - name: Upload artifact (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: LunarEclipseAlignTool-${{ matrix.platform }}-${{ steps.get_version.outputs.version }}${{ github.event.inputs.debug_build == 'true' && '-debug' || '' }}
        path: dist/${{ matrix.asset_name }}
        if-no-files-found: error

    - name: Upload to Release (Windows)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-latest' && github.event.inputs.debug_build != 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/Lunar Eclipse Align Tool.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload to Release (macOS)
      if: startsWith(github.ref, 'refs/tags/') && matrix.os == 'macos-latest' && github.event.inputs.debug_build != 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: dist/${{ matrix.asset_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release-notes:
    name: Create Release Notes
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') && github.event.inputs.debug_build != 'true'

    steps:
    - name: Get version
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Update Release Description
      uses: softprops/action-gh-release@v1
      with:
        body: |
          ## 月食圆面对齐工具 ${{ steps.get_version.outputs.version }}

          ### 下载

          #### Windows
          - 📦 [LunarEclipseAlignTool-Windows.exe](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/Lunar%20Eclipse%20Align%20Tool.exe)
          - 双击运行，首次可能需要允许 Windows Defender

          #### macOS
          - 📦 [LunarEclipseAlignTool-macOS.dmg](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/LunarEclipseAlignTool-macOS.dmg)
          - 打开 DMG，拖拽到 Applications 文件夹
          - 首次运行：右键点击 → 打开（绕过 Gatekeeper）

          ### 系统要求
          - **Windows**: Windows 10/11 64位
          - **macOS**: macOS 11 (Big Sur) 或更高版本

          ### 主要功能
          - PHD2 增强算法：基于霍夫圆检测
          - 多 ROI 精配准（实验性）
          - 自动化批处理
          - 实时参数调试

          ### 使用说明
          请参考 [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)

          ---
          🤖 自动构建 | 构建编号: ${{ github.run_id }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
